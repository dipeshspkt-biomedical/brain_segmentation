# -*- coding: utf-8 -*-
"""Module-File_Handler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lZM3FWnsJfAs2o0WuPNdtIkqKKSN5All
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from ipywidgets import interact,IntSlider
from glob import glob
import os
from google.colab import drive
import nibabel as nib
from nibabel.processing import resample_from_to

class Files(object):
  def __init__(self):
    None

  def load_file(self,File_Path):
    content=nib.load(File_Path)
    return content

  def extract_image_label_path(self,Main_Directory):
    Image_Files=sorted(glob(f'{Main_Directory}/**/*.nii.gz*',recursive=True))
    Label_Files=sorted(glob(f'{Main_Directory}/**/aseg.mgz*',recursive=True))
    return Image_Files,Label_Files

  def extract_image_path(self,Image_Directory):
    Image_Files=sorted(glob(f'{Image_Directory}/**/*.nii.gz*',recursive=True))
    return Image_Files

  def extract_label_path(self,Label_Directory):
    Label_Files=sorted(glob(f'{Label_Directory}/**/*.nii.gz*',recursive=True))
    return Label_Files

  def save_as_nifti1(self,content,destination_file_path):
    save_img=nib.Nifti1Image(dataobj=content.get_fdata(),affine=content.affine)
    nib.save(save_img,destination_file_path)
    return None

  def construct_filepath(self,Target_Directory,Filename):
    file_path=os.path.join(Target_Directory,Filename)
    return file_path

  def remove_file(self,file_path):
    os.remove(file_path)
    return None

def Files_Processing(Main_Directory,Save_Image_Directory,Save_Label_Directory):
  file_handler=Files()
  Main_Directory=Main_Directory
  Save_Image_Directory=Save_Image_Directory
  Save_Label_Directory=Save_Label_Directory
  def Extract_Filepath(Main_Directory):
    Image_Files,Label_Files=file_handler.extract_image_label_path(Main_Directory)
    Image_Directory=[]
    for i,files in enumerate(Image_Files):
      if files.split('/')[6]!=Image_Files[i-1].split('/')[6]:
        Image_Directory.append(files)
    img_index=[items.split('/')[6] for items in Image_Directory]
    label_index=[items.split('/')[6] for items in Label_Files]
    Valid_index=[index for index,element in enumerate(img_index) if element in label_index]
    Valid_Image_Files=[Image_Directory[index] for index in Valid_index]
    Path_Data=[{'Image Index':img,'Label Index':label} for img,label in zip(Valid_Image_Files,Label_Files)]
    Path_Dataframe=pd.DataFrame(Path_Data)
    return Path_Dataframe


  def Split_Image_Label(Path_df,Save_Image_Directory,Save_Label_Directory):
    for img,label in zip(Path_df.iloc[:,0],Path_df.iloc[:,1]):
      img_content=file_handler.load_file(img)
      label_content=file_handler.load_file(label)
      img_filename=file_handler.construct_filepath(Save_Image_Directory,img.split('/')[7]+'_'+img.split('/')[8]+'.nii.gz')
      label_filename=file_handler.construct_filepath(Save_Label_Directory,label.split('/')[7]+'.nii.gz')
      file_handler.save_as_nifti1(img_content,img_filename)
      file_handler.save_as_nifti1(label_content,label_filename)
    return None

  path_df=Extract_Filepath(Main_Directory)
  Split_Image_Label(path_df,Save_Image_Directory,Save_Label_Directory)
  return path_df