# -*- coding: utf-8 -*-
"""Module-Feature_Extractor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18k1l0QmHtlv_QQixgRp9S_YVQVL6UnHP
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from ipywidgets import interact,IntSlider
from glob import glob
import os
from google.colab import drive
import nibabel as nib
from nibabel.processing import resample_from_to
import file_handler
from file_handler import Files

Standard_Labels=np.array([ 0.,   2.,   3.,   4.,   5.,   7.,   8.,  10.,  11.,  12.,  13.,
        14.,  15.,  16.,  17.,  18.,  24.,  26.,  28.,  30.,  31.,  41.,
        42.,  43.,  44.,  46.,  47.,  49.,  50.,  51.,  52.,  53.,  54.,
        58.,  60.,  62.,  63.,  77.,  80.,  85., 251., 252., 253., 254.,
       255.])
lut_path='/kaggle/input/freesurfer-color-map/FreeSurferColorLUT.txt'

class Features(Files):
  def __init__(self):
    self.Standard_Labels=Standard_Labels
    self.LUT_Path=lut_path

  def extract_image_label_features(self,image_path,label_path):
    features={'Patient Index':image_path.split('/')[6],'Image Shape':self.load_file(image_path).get_fdata().shape,'Label Shape':self.load_file(label_path).get_fdata().shape,'Image Orientation':nib.aff2axcodes(self.load_file(image_path).affine),'Label Orientation':nib.aff2axcodes(self.load_file(label_path).affine),'Image Voxel Dimension':self.load_file(image_path).header.get_zooms(),'Label Voxel Dimension':self.load_file(label_path).header.get_zooms(),'Maximum Image Intensity':np.max(self.load_file(image_path).get_fdata()),'Minimum Image Intensity':np.min(self.load_file(image_path).get_fdata()),'Number of Labels':len(np.unique(self.load_file(label_path).get_fdata())),'Non-Standard Label Index':[items for items in np.unique(self.load_file(label_path).get_fdata()) if items not in Standard_Labels]}
    return features

  def create_cmap(self):
    lut=np.loadtxt(self.LUT_Path,dtype=str,usecols=(0,1,2,3,4,5))
    lut_df=pd.DataFrame(lut)
    lut_df.columns=['Label Value','Label Name','Red','Green','Blue','Opacity']
    mod_lut_df=lut_df[['Label Value','Red','Green','Blue','Opacity']].astype(dtype=np.uint32)
    cmap_df=mod_lut_df[mod_lut_df['Label Value'].isin(Standard_Labels)].reset_index(drop=True)
    cmap_numpy=cmap_df.to_numpy()
    return cmap_numpy

  def transform_label_values(self,label_data):
    cmap_data=self.create_cmap()
    for items in self.Standard_Labels:
      label_data[label_data==items]=np.where(cmap_data[:,0]==items)[0][0]
    return label_data

  def visualize_image_label(self,pat_index,image_data,label_data):
    cmap_data=self.create_cmap()
    fig,ax=plt.subplots(1,2,figsize=(10,5))
    plt.suptitle(f'Patient Index: {pat_index}')
    ax[0].set_title('MRI Image')
    ax[1].set_title('Label Image')
    ax[0].imshow(image_data,cmap='gray')
    ax[1].imshow(cmap_data[label_data.astype(int),1:4])
    return plt.show()

  def visualize_image_label_overlay(self,pat_index,image_data,label_data):
    cmap_data=self.create_cmap()
    plt.imshow(image_data,cmap='gray')
    plt.imshow(cmap_data[label_data.astype(int),1:4],alpha=0.9)
    plt.title(f'Patient Index: {pat_index}')
    return plt.show()

  def resample_image_to_label(self,image_path,label_path):
    resampled_img=resample_from_to(self.load_file(image_path),self.load_file(label_path),1)
    return resampled_img

def analyse_features(Image_Directory,Label_Directory):
  img_path=Features().extract_image_path(Image_Directory)
  label_path=Features().extract_label_path(Label_Directory)
  features=[Features().extract_image_label_features(img,label) for img,label in zip(img_path,label_path)]
  features_df=pd.DataFrame(features)
  return features_df


def remove_faulty_files(Image_Directory,Label_Directory):
  feat_df=analyse_features(Image_Directory,Label_Directory)
  index=feat_df[feat_df['Number of Labels']!=45].index.tolist()
  img_path=Features().extract_image_path(Image_Directory)
  label_path=Features().extract_label_path(Label_Directory)
  for i in index:
    Features().remove_file(img_path[i])
    Features().remove_file(label_path[i])
  return None

def resample_image(Image_Directory,Label_Directory,Resampled_Image_Directory):
  img_path=Features().extract_image_path(Image_Directory)
  label_path=Features().extract_label_path(Label_Directory)
  for img,label in zip(img_path,label_path):
    resampled_img=Features().resample_image_to_label(img,label)
    resampled_img_filename=Features().construct_filepath(Resampled_Image_Directory,'Resampled_'+img.split('/')[6][0:-7]+'.nii')
    Features().save_as_nifti1(resampled_img,resampled_img_filename)
  return None

def display_image_label(Image_Directory,Label_Directory,patient_index,slice_index):
  img=Features().load_file(Features().extract_image_path(Image_Directory)[patient_index]).get_fdata()
  label=Features().load_file(Features().extract_label_path(Label_Directory)[patient_index]).get_fdata()
  label=Features().transform_label_values(label)
  return Features().visualize_image_label(Features().extract_image_path(Image_Directory)[patient_index].split('/')[4],img[slice_index,:,:],label[slice_index,:,:])


def display_image_label_overlay(Image_Directory,Label_Directory,patient_index,slice_index):
  img=Features().load_file(Features().extract_image_path(Image_Directory)[patient_index]).get_fdata()
  label=Features().load_file(Features().extract_label_path(Label_Directory)[patient_index]).get_fdata()
  label=Features().transform_label_values(label)
  return Features().visualize_image_label_overlay(Features().extract_image_path(Image_Directory)[patient_index].split('/')[4],img[slice_index,:,:],label[slice_index,:,:])
